# Generated by Factory Steps v<%= FactorySteps::VERSION %>

# Create object from model name
#
#   Given a "user" exists
#
Given /^an? "([^\"]*)" exists$/ do |model|
  set_current_object_for(model)
end

# Create model object using named blueprint
#
#   Given an "admin" "user" exists
#
Given /^an? "([^\"]*)" "([^\"]*)" exists$/ do |blueprint, model|
  object = model_class(model).make(blueprint.to_sym)
  set_current_object_for(model, object)
end

# Create model object with a specific attribute value
#
#   Given a "user" exists with "name" of "Pete Best"
#
Given /^an? "([^\"]*)" exists with "([^\"]*)" of "([^\"]*)"$/ do |model, attribute, value|
  set_current_object_for(model, attribute => value)
end

# Create associated object for an existing object created with a factory step
#
#   Given a "comment" exists for this "post"
#
Given /^an? "([^\"]*)" exists for this "([^\"]*)"$/ do |model, parent|
  parent_object = get_current_object_for(parent)
  set_current_object_for(model, parent.to_sym => parent_object)
end

# Create associated object for an existing object with a specific attribute value
#
#   Given a "comment" exists for this "post" with "body" of "Nice post!"
#
Given /^an? "([^\"]*)" exists for this "([^\"]*)" with "([^\"]*)" of "([^\"]*)"$/ do |model, parent, attribute, value|
  parent_object = get_current_object_for(parent)
  set_current_object_for(model, parent.to_sym => parent_object, attribute => value)
end

# Create associated object from named blueprint for an existing object created with a factory step
#
#   Given a "spam" "comment" exists for this "post"
#
Given /^an? "([^\"]*)" "([^\"]*)" exists for this "([^\"]*)"$/ do |blueprint, model, parent|
  parent_object = get_current_object_for(parent)
  raise "Parent missing" unless parent_object
  object = model_class(model).make(blueprint.to_sym, parent.to_sym => parent_object)
  set_current_object_for(model, object)
end

# Create associated object for an associated object of the logged in user
#
#   Given a "comment" exists for my "post"
#
Given /^an? "([^\"]*)" exists for my "([^\"]*)"$/ do |model, parent|
  parent_object = logged_in_user.send("#{dehumanize(parent)}")
  raise "Parent missing" unless parent_object
  set_current_object_for(model, parent.to_sym => parent_object)
end

# Create associated object for an associated object of the logged in user
#
#   Given a "comment" exists for my "post"
#
Given /^an? "([^\"]*)" "([^\"]*)" exists for my "([^\"]*)"$/ do |blueprint, model, parent|
  parent_object = logged_in_user.send("#{dehumanize(parent)}")
  raise "Parent missing" unless parent_object
  object = model_class(model).make(blueprint.to_sym, parent.to_sym => parent_object)
  set_current_object_for(model, object)
end

# Create associated object for an associated object of the logged in user, with a specific attribute value
#
#   Given a "comment" exists for my "post" with
#
Given /^an? "([^\"]*)" exists for my "([^\"]*)" with "([^\"]*)" of "([^\"]*)"$/ do |model, parent, attribute, value|
  parent_object = logged_in_user.send("#{dehumanize(parent)}")
  raise "Parent missing" unless parent_object
  set_current_object_for(model, parent.to_sym => parent_object, attribute => value)
end

# Assert that an object created with a factory step has specific attribute value
#
#   Then this "post" should have a "title" of "Big Post"
#
Then /^this "([^\"]*)" should have an? "([^\"]*)" of "([^\"]*)"$/ do |model, attribute, value|
  model_object = get_current_object_for(model)
  model_object.reload
  model_object.send(dehumanize(attribute)).to_s.should == value
end

# Assert that an object created with a factory step has boolean method evaluating to true
#
#   Then this "post" should be "published"
#
# The method 'published?' should be defined on the model
#
Then /^this "([^\"]*)" should be "([^\"]*)"$/ do |model, attribute|
  model_object = get_current_object_for(model)
  model_object.reload
  model_object.send("#{dehumanize(attribute)}?").should be_true
end

# Assert a record count of a particular model
#
#   Then there should be 1 "post"
# or
#   Then there should be 2 "posts"
#
Then /^there should be (\d+) "([^\"]*)"$/ do |count, model|
  model_class(model).count.should == count.to_i
end

# Assert a record count for an association on an object created with a factory step
#
#   Then this "post" should have 1 "comment"
# or
#   Then there should be 1 "comment" for this "post"
#
Then /^this "([^\"]*)" should have (\d+) "([^\"]*)"$/ do |parent, count, model|
  parent_object = get_current_object_for(parent)
  parent_object.send(dehumanize(model.pluralize)).count.should == count.to_i
end

Then /^there should be (\d+) "([^\"]*)" for this "([^\"]*)"$/ do |count, model, parent|
  Then %Q{this "#{parent}" should have #{count} "#{model}"}
end

# Assert a record count of a particular model with condition on an attribute value
#
#   Then there should be 1 "post" with "title" of "Big Post"
#
Then /^there should be (\d+) "([^\"]*)" with "([^\"]*)" of "([^\"]*)"$/ do |count, model, attribute, value|
  model_class(model).find(:all, :conditions => {attribute => value}).size.should == count.to_i
end

# Assert a record count of a particular model with the condition of attribute being null
#
#   Then there should be 1 "post" with a null "title"
#
Then /^there should be (\d+) "([^\"]*)" with an? null "([^\"]*)"$/ do |count, model, attribute|
  model_class(model).find(:all, :conditions => {attribute => nil}).size.should == count.to_i
end

# Assert a record count of a particular model with the condition of attribute being non-null
#
#   Then there should be 1 "post" with a null "title"
#
Then /^there should be (\d+) "([^\"]*)" with non-null "([^\"]*)"$/ do |count, model, attribute|
  model_class(model).find(:all, :conditions => "#{attribute} is not null").size.should == count.to_i
end
